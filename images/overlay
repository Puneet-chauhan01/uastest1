import cv2
import numpy as np

# Load the original image
img = cv2.imread('3.png')
# Convert the image to the HSV color space for better color segmentation
hsv = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)

# Define the lower and upper bounds for green color in HSV color space
lowergrass = np.array([1, 30, 1])   # Lower bound for green (adjust as needed)
uppergrass = np.array([85, 255, 255])  # Upper bound for green (adjust as needed)

# Define the lower and upper bounds for brown color in HSV color space
burntashes = np.array([5, 50, 5])   # Lower bound for brown (adjust as needed)
burntgrass = np.array([30, 255, 255])  # Upper bound for brown (adjust as needed)
#create mask fro identifying red houses
lowred = np.array([0, 100, 90])   # Lower bound for red (adjust as needed)
upred = np.array([10, 255, 255])  # Upper bound for red (adjust as needed)

# Create masks for green and brown regions
green = cv2.inRange(hsv, lowergrass, uppergrass)
brown = cv2.inRange(hsv, burntashes, burntgrass)

# Create cyan color (for green areas) and yellow color (for brown areas)
cyan = (230, 230, 0)   # Cyan color in BGR
yellow = (0, 230, 230)  # Yellow color in BGR

# Replace green areas with cyan color and brown areas with yellow color
result = np.copy(img)
result[np.where(green)] = cyan 
result[np.where(brown)] = yellow
#####################                                   #######################
##################### Detection of houses in burnt area #######################
#####################                                   #######################
lowylw = np.array([0, 100, 100])  
upylw = np.array([80, 255, 255]) 

lowcyn = np.array([150, 0, 0])  # Lower cyan
upcyn = np.array([250, 255, 255])  # upper cyan


ylwmask = cv2.inRange(result,lowylw,upylw)

cynmask = cv2.inRange(result,lowcyn,upcyn)
cynrgn = cv2.bitwise_and(result, result, mask=cynmask)

yelrgn = cv2.bitwise_and(result, result, mask=ylwmask)


gray = cv2.cvtColor(yelrgn,cv2.COLOR_BGR2GRAY)
ret,binary = cv2.threshold(gray,100,255,cv2.THRESH_BINARY+cv2.THRESH_OTSU)
edges = cv2.Canny(binary, 3, 5)

contours, _ = cv2.findContours(edges.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

#TRIANGLE DETECTION 
tr = 0
        
for contour in contours:
    approx = cv2.approxPolyDP(contour, 0.06 * cv2.arcLength(contour, True), True)
    if len(approx) == 3:
        tr +=1
#cv2.drawContours(result, tr, -1, (0, 255, 0), 2)
#cv2.drawContours(result, triangles, -1, (0, 255, 0), 2)  # Draw triangles on the image
print("Number of houses iin burnt", tr)
cv2.imshow("TRIANGLE DETECTION ", result)

#cv2.imshow('yelrgn', yelrgn)
######################                                       #######################
######################   Detection of houses in unburnt area ##################
######################                                       ##################



#####################
#####################
#####################
# Display the result
print("Lower Cyan HSV Bound:", lowcyn)
print("Upper Cyan HSV Bound:", upcyn)
task2 =np.array([tr,1])
print(task2)
cv2.imwrite('N1.png', result)
cv2.imshow('task1', result)
cv2.waitKey(0)
cv2.destroyAllWindows()